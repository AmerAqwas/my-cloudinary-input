{"version":3,"sources":["App.tsx","index.tsx"],"names":["isMediaType","item","Boolean","isMediaList","media","Array","isArray","length","every","declaration","extensionType","ExtensionType","field","fieldType","FieldExtensionType","JSON","name","description","features","FieldExtensionFeature","FieldRenderer","ListRenderer","TableRenderer","config","CLOUD_NAME","displayName","type","ConfigType","string","required","API_KEY","noop","Extension","useFieldExtension","isTableCell","TableCellRenderer","FormFieldRenderer","value","isList","onChange","onFocus","onBlur","expand","isExpanded","openDialog","extension","useState","isTransitioning","setIsTransitioning","useEffect","React","clickedMedia","setClickedMedia","showMedia","style","display","flexDirection","alignItems","padding","opacity","cursor","marginBottom","boxSizing","userSelect","color","backgroundColor","textAlign","lineHeight","border","borderRadius","fontWeight","fontFamily","fontSize","verticalAlign","onClick","maxWidth","then","map","index","public_id","FormAsset","cloudName","String","onOpen","onClose","undefined","marginLeft","newValues","filter","TableAssetsPreviewModal","closeModal","width","height","marginRight","TableAsset","FullScreenPreview","resource_type","outline","background","publicId","crop","controls","tabIndex","onKeyPress","e","key","flexShrink","objectFit","maximizedAsset","setMaximizedAsset","aria-modal","role","position","inset","margin","stopPropagation","CloseModalButton","maxHeight","overflowY","handler","window","addEventListener","removeEventListener","overflow","CloudinaryDialog","useUiExtensionDialog","onCloseDialog","useLayoutEffect","cloudinary","createMediaLibrary","cloud_name","api_key","remove_header","max_files","multiple","insert_caption","inline_container","default_transformations","quality","fetch_format","gravity","radius","integration","platform","version","environment","hideHandler","insertHandler","data","assets","newArray","show","id","right","top","event","preventDefault","App","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f73971d.chunk.js","sourcesContent":["import React, { useLayoutEffect, useState, useEffect } from 'react';\nimport { Image, Video, Placeholder } from 'cloudinary-react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport {\n  Wrapper as ExtensionWrapper,\n  useUiExtensionDialog,\n  useFieldExtension,\n  FieldExtensionType,\n  FieldExtensionFeature,\n  FieldExtensionDeclaration,\n  ExtensionType,\n  ConfigType,\n} from '@graphcms/uix-react-sdk';\n\ntype Media = {\n  public_id: string;\n  resource_type: string;\n};\n\nfunction isMediaType(item: any): item is Media {\n  return Boolean(item) && 'public_id' in item && 'resource_type' in item;\n}\nfunction isMediaList(media: Media | Media[] | string): media is Media[] {\n  return (\n    Array.isArray(media) &&\n    media.length > 0 &&\n    media.every((item) => isMediaType(item))\n  );\n}\n// useUiExtensionDialog hook accepts two type parameters:\n// 1. The return value type, will be null or undefined if nothing is returned; falls back to any\ntype DialogReturn = Media | Media[] | null;\n// 2. Optional props you'd like to access in the dialog\ntype DialogProps = { isList: boolean; media: Media | Media[] | '' };\n\nconst declaration: FieldExtensionDeclaration = {\n  extensionType: ExtensionType.field,\n  fieldType: FieldExtensionType.JSON,\n  name: 'Cloudinary asset',\n  description: 'Pick asset object in Cloudinary',\n  features: [\n    // Enables rendering of a form field\n    FieldExtensionFeature.FieldRenderer,\n    // Enables handling lists of values\n    // Don't forget to enable multiple values when creating a UI extension field in Hygraph!\n    FieldExtensionFeature.ListRenderer,\n    // Enables rendering in content table view\n    FieldExtensionFeature.TableRenderer,\n  ],\n  // Optional fields that will when adding or updating a UI extension in Hygraph\n  config: {\n    CLOUD_NAME: {\n      displayName: 'Cloudinary cloud name',\n      type: ConfigType.string,\n      required: true,\n    },\n    API_KEY: {\n      displayName: 'Cloudinary public api key',\n      type: ConfigType.string,\n      required: true,\n    },\n  },\n};\n\nfunction noop() {}\n\n// Treat the dialog as a separate extension and render it at a dedicated route\n// The dialog path you set here should later be passed as the first argument to the openDialog function\nfunction App() {\n  return (\n    <ExtensionWrapper declaration={declaration}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Extension />\n          </Route>\n          <Route path=\"/cloudinary\" exact>\n            <CloudinaryDialog />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </ExtensionWrapper>\n  );\n}\n\nfunction Extension() {\n  const { isTableCell } = useFieldExtension();\n  // isTableCell can be used to detect whether the extension is currently rendered in content table\n  if (isTableCell) {\n    return <TableCellRenderer />;\n  }\n\n  return <FormFieldRenderer />;\n}\n\nfunction FormFieldRenderer() {\n  const {\n    value: media,\n    // field.isList reveals whether a field handles multiple values\n    field: { isList },\n    onChange,\n    onFocus,\n    onBlur,\n    // expand opens a full-screen view\n    expand,\n    isExpanded,\n    openDialog,\n    extension: { config },\n  } = useFieldExtension();\n\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  useEffect(() => {\n    setIsTransitioning(false);\n  }, [isExpanded]);\n\n  const [clickedMedia, setClickedMedia] = React.useState<Media>();\n  // Note that in a form, an empty field's initial value is an empty string\n  const showMedia = Array.isArray(media) ? media.length > 0 : Boolean(media);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-start',\n        padding: '10px',\n        opacity: isTransitioning ? 0 : 1,\n      }}\n    >\n      {isExpanded ? null : (\n        <button\n          style={{\n            cursor: 'pointer',\n            marginBottom: '10px',\n            boxSizing: 'border-box',\n            userSelect: 'none',\n            color: '#6663FD',\n            backgroundColor: '#F2F1FF',\n            textAlign: 'center',\n            lineHeight: '16px',\n            display: 'inline-flex',\n            border: '0px',\n            borderRadius: '4px',\n            fontWeight: 600,\n            fontFamily:\n              'Inter, -apple-system, system-ui, \"Segoe UI\", Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            verticalAlign: 'middle',\n            padding: '8px',\n          }}\n          onClick={() => {\n            onFocus();\n            // openDialog accepts a route path as the first argument and,\n            // optionally, an object with props that will be passed to the dialog.\n            // These props will be returned by the useUiExtensionDialog hook\n            //\n            openDialog<DialogReturn, DialogProps>('/cloudinary', {\n              // By default, native Hygraph dialogs have a maxWidth of 600px.\n              // You can overwrite it by passing a maxWidth prop\n              maxWidth: '90vw',\n              isList,\n              media,\n              // openDialog returns a Promise with the value that was passed to onCloseDialog\n            }).then((value) => {\n              if (value) {\n                onChange(value);\n              }\n              onBlur();\n            });\n          }}\n        >\n          Choose from Cloudinary\n        </button>\n      )}\n      {showMedia &&\n        (isMediaList(media) ? (\n          media.map((item, index) => (\n            <div\n              style={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'flex-start',\n                opacity:\n                  isExpanded && item.public_id !== clickedMedia?.public_id\n                    ? 0\n                    : 1,\n              }}\n              key={item.public_id + index}\n            >\n              <FormAsset\n                cloudName={String(config.CLOUD_NAME)}\n                media={item}\n                isExpanded={\n                  item.public_id === clickedMedia?.public_id && isExpanded\n                }\n                onOpen={() => {\n                  // expand accepts a boolean that will be accessible as isExpanded\n                  expand(true);\n                  setIsTransitioning(true);\n                  setClickedMedia(item);\n                }}\n                onClose={() => {\n                  expand(false);\n                  setIsTransitioning(true);\n                  setClickedMedia(undefined);\n                }}\n              />\n              <button\n                style={{\n                  marginLeft: '10px',\n                  cursor: 'pointer',\n                  boxSizing: 'border-box',\n                  userSelect: 'none',\n                  color: '#6663FD',\n                  backgroundColor: 'transparent',\n                  textAlign: 'center',\n                  lineHeight: '14px',\n                  display: 'inline-flex',\n                  border: '0px',\n                  fontWeight: 500,\n                  fontFamily: 'sans-serif',\n                  fontSize: '12px',\n                  verticalAlign: 'middle',\n                  padding: '4px',\n                }}\n                onClick={() => {\n                  const newValues = media.filter(\n                    (value) => value.public_id !== item.public_id\n                  );\n                  onChange(newValues);\n                }}\n              >\n                X\n              </button>\n            </div>\n          ))\n        ) : (\n          <FormAsset\n            cloudName={String(config.CLOUD_NAME)}\n            isExpanded={\n              media.public_id === clickedMedia?.public_id && isExpanded\n            }\n            onOpen={() => {\n              expand(true);\n              setIsTransitioning(true);\n              setClickedMedia(media);\n            }}\n            onClose={() => {\n              expand(false);\n              setIsTransitioning(true);\n              setClickedMedia(undefined);\n            }}\n            media={media}\n          />\n        ))}\n    </div>\n  );\n}\n\nfunction TableCellRenderer() {\n  const {\n    value: media,\n    isExpanded,\n    expand,\n    field: { isList },\n    extension: { config },\n  } = useFieldExtension();\n\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  useEffect(() => {\n    setIsTransitioning(false);\n  }, [isExpanded]);\n\n  if (Array.isArray(media) ? media.length === 0 : Boolean(media) === false) {\n    return null;\n  }\n\n  if (isExpanded && isList) {\n    return (\n      <TableAssetsPreviewModal\n        cloudName={String(config.CLOUD_NAME)}\n        media={media}\n        closeModal={() => {\n          expand(false);\n          setIsTransitioning(true);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        opacity: isTransitioning ? 0 : 1,\n      }}\n    >\n      {isMediaList(media) ? (\n        media.map((item: Media, index: number) => (\n          <div\n            key={item.public_id + index}\n            style={{\n              width: 59,\n              height: 59,\n              marginRight: index === media.length - 1 ? 0 : 10,\n            }}\n          >\n            <TableAsset\n              cloudName={String(config.CLOUD_NAME)}\n              media={item}\n              onOpen={() => {\n                expand(true);\n                setIsTransitioning(true);\n              }}\n              isExpanded={false}\n              onClose={noop}\n            />\n          </div>\n        ))\n      ) : (\n        <div style={{ width: 59, height: 59 }}>\n          <TableAsset\n            cloudName={String(config.CLOUD_NAME)}\n            isExpanded={isExpanded}\n            onClose={() => {\n              expand(false);\n              setIsTransitioning(true);\n            }}\n            onOpen={() => {\n              expand(true);\n              setIsTransitioning(true);\n            }}\n            media={media}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction FormAsset({\n  media,\n  onOpen,\n  onClose,\n  isExpanded,\n  cloudName,\n}: {\n  style?: React.CSSProperties;\n  isExpanded: boolean;\n  media: Media;\n  onOpen: () => void;\n  onClose: () => void;\n  cloudName: string;\n}) {\n  if (isExpanded) {\n    return (\n      <FullScreenPreview\n        cloudName={cloudName}\n        media={media}\n        onClose={onClose}\n      />\n    );\n  }\n\n  if (media.resource_type === 'image')\n    return (\n      <button\n        onClick={onOpen}\n        style={{\n          border: 'none',\n          outline: 'none',\n          background: 'transparent',\n          cursor: 'pointer',\n        }}\n      >\n        <Image\n          cloudName={cloudName}\n          publicId={media.public_id}\n          width=\"400\"\n          crop=\"scale\"\n        >\n          <Placeholder />\n        </Image>\n      </button>\n    );\n\n  if (media.resource_type === 'video')\n    return (\n      <Video\n        cloudName={cloudName}\n        publicId={media.public_id}\n        width=\"400\"\n        controls\n      />\n    );\n\n  return null;\n}\n\nfunction TableAsset({\n  isExpanded,\n  media,\n  onOpen,\n  onClose,\n  cloudName,\n  style,\n}: {\n  style?: React.CSSProperties;\n  isExpanded: boolean;\n  media: Media;\n  onOpen: () => void;\n  onClose: () => void;\n  cloudName: string;\n}) {\n  if (isExpanded) {\n    return (\n      <FullScreenPreview\n        media={media}\n        onClose={onClose}\n        cloudName={cloudName}\n      />\n    );\n  }\n\n  return (\n    <div\n      tabIndex={0}\n      onClick={onOpen}\n      onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          onOpen();\n        }\n      }}\n      style={{\n        width: 59,\n        height: 59,\n        flexShrink: 0,\n        ...style,\n      }}\n    >\n      {media.resource_type === 'image' ? (\n        <Image\n          publicId={media.public_id}\n          cloudName={cloudName}\n          width=\"auto\"\n          crop=\"scale\"\n          style={{\n            objectFit: 'cover',\n            width: '100%',\n            height: '100%',\n            cursor: 'pointer',\n          }}\n        >\n          <Placeholder />\n        </Image>\n      ) : media.resource_type === 'video' ? (\n        <Video\n          cloudName={cloudName}\n          publicId={media.public_id}\n          width=\"auto\"\n          style={{\n            objectFit: 'cover',\n            width: '100%',\n            height: '100%',\n            cursor: 'pointer',\n          }}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nfunction TableAssetsPreviewModal({\n  closeModal,\n  media,\n  cloudName,\n}: {\n  media: Media[];\n  closeModal: () => void;\n  cloudName: string;\n}) {\n  const [maximizedAsset, setMaximizedAsset] = useState<Media | null>(null);\n\n  if (maximizedAsset) {\n    return (\n      <TableAsset\n        cloudName={cloudName}\n        media={maximizedAsset}\n        isExpanded\n        onOpen={noop}\n        onClose={() => {\n          setMaximizedAsset(null);\n        }}\n      />\n    );\n  }\n\n  return (\n    <div\n      aria-modal=\"true\"\n      role=\"dialog\"\n      style={{\n        position: 'fixed',\n        inset: 0,\n        display: 'flex',\n      }}\n      onClick={closeModal}\n    >\n      <div\n        style={{ margin: 'auto' }}\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        <CloseModalButton closeModal={closeModal} />\n        <div\n          style={{\n            display: 'flex',\n            borderRadius: '4px',\n            backgroundColor: 'white',\n            maxWidth: '800px',\n            maxHeight: '400px',\n            padding: '16px',\n            overflowY: 'auto',\n          }}\n        >\n          {media.map((item, index) => (\n            <TableAsset\n              isExpanded={false}\n              cloudName={cloudName}\n              media={item}\n              key={item.public_id + index}\n              onOpen={() => {\n                setMaximizedAsset(item);\n              }}\n              onClose={() => {\n                setMaximizedAsset(null);\n              }}\n              style={{\n                width: 250,\n                height: 200,\n                marginRight: index === media.length - 1 ? 0 : 16,\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction FullScreenPreview({\n  media,\n  cloudName,\n  onClose,\n}: {\n  media: Media;\n  onClose: () => void;\n  cloudName: string;\n}) {\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n    window.addEventListener('keyup', handler);\n    return () => {\n      window.removeEventListener('keyup', handler);\n    };\n  }, [onClose]);\n\n  return (\n    <div\n      aria-modal=\"true\"\n      role=\"dialog\"\n      style={{\n        position: 'fixed',\n        inset: 0,\n        display: 'flex',\n        alignItems: 'center',\n        overflow: 'auto',\n      }}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClose();\n      }}\n    >\n      <CloseModalButton closeModal={onClose} />\n      {media.resource_type === 'image' ? (\n        <Image\n          cloudName={cloudName}\n          publicId={media.public_id}\n          width=\"auto\"\n          style={{ maxWidth: '100%', margin: 'auto', maxHeight: '100%' }}\n          crop=\"scale\"\n        >\n          <Placeholder />\n        </Image>\n      ) : media.resource_type === 'video' ? (\n        <Video\n          cloudName={cloudName}\n          publicId={media.public_id}\n          controls\n          style={{ maxWidth: '70vw', margin: 'auto', maxHeight: '100%' }}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nfunction CloudinaryDialog() {\n  const {\n    extension: { config },\n  } = useFieldExtension();\n  // You can pass type parameters to useUiExtensionDialog\n  // onCloseDialog function is always returned from the hook\n  const { onCloseDialog, isList, media } = useUiExtensionDialog<\n    DialogReturn,\n    DialogProps\n  >();\n  useLayoutEffect(() => {\n    // @ts-expect-error\n    const mediaLibrary = window.cloudinary.createMediaLibrary(\n      {\n        cloud_name: config.CLOUD_NAME,\n        api_key: config.API_KEY,\n        remove_header: false,\n        max_files: '10',\n        multiple: isList,\n        insert_caption: 'Add & close',\n        inline_container: '#cloudinary_dialog',\n        default_transformations: [\n          [{ quality: 'auto' }, { fetch_format: 'auto' }],\n          [\n            {\n              width: 80,\n              height: 80,\n              crop: 'fill',\n              gravity: 'auto',\n              radius: 'max',\n            },\n            { fetch_format: 'auto', quality: 'auto' },\n          ],\n        ],\n        integration: {\n          type: 'hygraph_cloudinary_extension',\n          platform: 'hygraph',\n          version: 1.0,\n          environment: 'prod',\n        },\n      },\n      {\n        hideHandler: function () {\n          // To close the dialog without returning a value to the fields,\n          // call onCloseDialog with null or without an argument\n          onCloseDialog();\n        },\n        insertHandler: function (data: { assets: Media[] }) {\n          // Pass a single value to onCloseDialog to set it as the field value\n          // or an array, if the field handles multiple values\n          if (isList) {\n            if (isMediaList(media)) {\n              onCloseDialog([...media, ...data.assets]);\n            } else {\n              // initial field value is an empty string\n              const newArray = isMediaType(media)\n                ? [media, ...data.assets]\n                : data.assets;\n              onCloseDialog(newArray);\n            }\n          } else {\n            onCloseDialog(data.assets[0]);\n          }\n        },\n      }\n    );\n    mediaLibrary.show();\n  }, [config.API_KEY, config.CLOUD_NAME, isList, media, onCloseDialog]);\n\n  return (\n    <div\n      id=\"cloudinary_dialog\"\n      style={{\n        height: '800px',\n      }}\n    />\n  );\n}\n\nfunction CloseModalButton({ closeModal }: { closeModal: () => void }) {\n  return (\n    <button\n      type=\"button\"\n      style={{\n        cursor: 'pointer',\n        userSelect: 'none',\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        lineHeight: '16px',\n        display: 'inline-flex',\n        border: '0px',\n        position: 'absolute',\n        right: '10px',\n        top: '10px',\n        fontWeight: 500,\n        background: 'white',\n        color: 'black',\n        fontSize: '16px',\n        borderRadius: '4px',\n        padding: '4px 8px',\n        verticalAlign: 'middle',\n        margin: 0,\n      }}\n      onClick={(event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        closeModal();\n      }}\n      onKeyPress={(event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.key === 'Enter') {\n          closeModal();\n        }\n      }}\n    >\n      Close\n    </button>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}